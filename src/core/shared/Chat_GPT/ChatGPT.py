import os
from dotenv import load_dotenv
from ...shared.YamlFetcher.YamlFetcher import YamlFetcher
from openai import OpenAI


class ChatGpt:
    """
    A class that represents a ChatGpt instance.

    Attributes:
        client (OpenAI): The OpenAI client used for API communication.

    Methods:
        __init__(): Initializes the ChatGpt instance.
        get_response(request): Generates a response using ChatGpt.

    """

    def __init__(self):
        """
        Initializes the ChatGPT class.
        """
        load_dotenv()
        self.client = OpenAI(
            api_key=os.getenv('OPENAI_API_KEY')
        )

    def get_response(self, request):
        '''
        Gets a response, which is generated by ChatGPT.

        Parameters:
            request (string): The user's request.

        Returns:
            answer (string): The generated response.
        '''
        chat_completion = self.client.chat.completions.create(
            messages=[
                {
                    "role": "user",
                    "content": request
                }
            ],
            model="gpt-3.5-turbo",
        )
        return chat_completion.choices[0].message.content

    def extract_json_code(self, response_content):
        """
        Extracts JSON code from the response content.

        Parameters:
            response_content (string): The content of the ChatGPT response.

        Returns:
            json_code (list): List of JSON code snippets found in the response.
        """
        json_code = []

        # Find the starting and ending indices of the JSON content
        start_index = response_content.find("{")
        end_index = response_content.rfind("}")

        # Extract the JSON content
        if start_index != -1 and end_index != -1:
            json_content = response_content[start_index:end_index + 1]
            json_code.append(json_content.replace('\n', '\n    '))  # Replace '\n' with actual line breaks

        return json_code